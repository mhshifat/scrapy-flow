import DataNotFound from "@/components/data-not-found";
import useGetPhaseQuery from "./use-get-phase-query";
import WorkflowExecutionPhaseSkeleton from "./workflow-execution-phase-skeleton";
import WorkflowExecutionPhasePlaceholder from "./workflow-execution-phase-placeholder";
import { ClockIcon } from "lucide-react";
import { getTimeDuration } from "@/utils/date";
import Accordion from "@/components/ui/accordion";
import { Input } from "@/components/ui/input";
import Label from "@/components/ui/label";
import Table from "@/components/ui/table";

interface WorkflowExecutionPhaseDetailsProps {
  selectedPhase: string | null;
}

export default function WorkflowExecutionPhaseDetails({ selectedPhase }: WorkflowExecutionPhaseDetailsProps) {
  const { data: phaseDetails, isLoading } = useGetPhaseQuery({
    id: selectedPhase
  });

  const inputs = JSON.parse(phaseDetails?.inputs || "{}");
  const outputs = JSON.parse(phaseDetails?.outputs || "{}");
  const duration = getTimeDuration(phaseDetails?.startedAt, phaseDetails?.completedAt);

  if (!selectedPhase) return <WorkflowExecutionPhasePlaceholder />
  if (isLoading) return <WorkflowExecutionPhaseSkeleton />;
  if (!phaseDetails) return <DataNotFound />;
  return (
    <div className="flex-1 p-5 overflow-x-hidden overflow-y-auto">
      <ul className="list-none p-0 m-0 flex items-center gap-2">
        <li className="flex items-center border border-foreground/10 rounded-md py-1 px-2">
          <ClockIcon className="size-4 mr-1 text-foreground/60" />
          <span className="text-sm font-medium text-foreground/60">Duration&nbsp;&nbsp;&nbsp;{duration}</span>
        </li>
      </ul>

      <Accordion className="mt-2 flex flex-col gap-2">
        <Accordion.Item className="border border-foreground/10 rounded-md">
          <Accordion.Trigger className="py-2 px-5 bg-foreground/10">
            <h3 className="text-lg font-medium leading-none">Inputs</h3>
            <p className="text-sm text-foreground/60 leading-none mt-[6px]">Inputs used for this phase</p>
          </Accordion.Trigger>
          <Accordion.Body className="p-5 border-t border-foreground/10">
            {!Object.keys(inputs || {}).length && (
              <p className="text-sm">No inputs found for this phase</p>
            )}
            {!!Object.keys(inputs || {}).length && Object.entries(inputs || {}).map(([key, val]) => (
              <Label key={key} title={key}>
                <Input
                  readOnly
                  value={(val || "") as string}
                />
              </Label>
            ))}
          </Accordion.Body>
        </Accordion.Item>
        <Accordion.Item className="border border-foreground/10 rounded-md">
          <Accordion.Trigger className="py-2 px-5 bg-foreground/10">
            <h3 className="text-lg font-medium leading-none">Outputs</h3>
            <p className="text-sm text-foreground/60 leading-none mt-[6px]">Outputs used for this phase</p>
          </Accordion.Trigger>
          <Accordion.Body className="p-5 border-t border-foreground/10">
            {!Object.keys(outputs || {}).length && (
              <p className="text-sm">No outputs found for this phase</p>
            )}
            {!!Object.keys(outputs || {}).length && Object.entries(outputs || {}).map(([key, val]) => (
              <Label key={key} title={key}>
                <Input
                  readOnly
                  value={(val || "") as string}
                />
              </Label>
            ))}
          </Accordion.Body>
        </Accordion.Item>
        <Accordion.Item className="border border-foreground/10 rounded-md">
          <Accordion.Trigger className="py-2 px-5 bg-foreground/10">
            <h3 className="text-lg font-medium leading-none">Logs</h3>
            <p className="text-sm text-foreground/60 leading-none mt-[6px]">Logs generated by this phase</p>
          </Accordion.Trigger>
          <Accordion.Body className="border-t border-foreground/10">
            <Table<{ id: string }>
              identifier="id"
              headers={[
                { title: "Time", key: "timestamp", cell: (date) => (date as Date).toISOString() },
                { title: "Level", key: "level" },
                { title: "Message", key: "message" },
              ]}
              data={phaseDetails.logs}
              emptyText={<p className="text-sm text-foreground/60">No logs found for this phase</p>}
            />
          </Accordion.Body>
        </Accordion.Item>
      </Accordion>
    </div>
  )
}